---
title: "EDS 223: Week 4"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
# Load packages
library(terra) # raster handling
library(tidyverse)
library(tmap) # map making
library(kableExtra) # table formatting
library(spData) # spatial data
library(spDataLarge) # spatial data
library(geodata) # spatial data
```

```{r}
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))
zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))
```

```{r}
# maps
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)")

tm_shape(zion_land) +
  tm_raster(title = "Land Cover")
```

```{r}
# multilayer raster
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
```

```{r}
# map of multilayer raster
tm_shape(landsat) +
  tm_raster()
```

```{r}
# subset multilayer data
landsat3 <- subset(landsat, "landsat_3")
```

```{r}
# map of layer 3
tm_shape(landsat3) +
  tm_raster()
```

```{r}
# global statistics
global(zion_elevation, mean)
freq(zion_land)
```

```{r}
# indexing
zion_elevation[1, 1] <- 0 # updated [1, 1] = [1]
zion_elevation[1]

# indexing multilayer data
landsat[1] <- 0 # updated all 4 layers
landsat[1]

test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```

```{r}
# Spatial subsetting
point <- matrix(c(-113, 37.5), ncol = 2)

# terra extract
terra::extract(zion_elevation, point)
```

```{r}
clip <- rast(xmin = -113.3, 
             xmax = -113,
             ymin = 37.2, 
             ymax = 37.9, 
             resolution = 0.3,
             vals =1)

zion_elevation_clip <- zion_elevation[clip, drop = FALSE]
```

```{r}
# map of zion_elevation
p1 <- tm_shape(zion_elevation) +
  tm_raster()

# map of clip
p2 <- tm_shape(zion_elevation_clip) +
  tm_raster()

tmap_arrange(p1, p2, nrow = 1)
```

```{r}
# Create maske
rmask <- zion_elevation
rmask[rmask < 2000] <- NA

# bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]

# terra mask
masked2 <- terra::mask(zion_elevation, rmask)
```

```{r}
# map of zion_elevation
p3 <- tm_shape(zion_elevation) +
  tm_raster()

# map of mask
p4 <- tm_shape(masked1) +
  tm_raster()

tmap_arrange(p3, p4, nrow = 1)
```

```{r}
# reclassify by groups
rcl <- matrix(c(1000, 1500, 1,
              1500, 2000, 2,
              2000, 2500, 3,
              2500, 3000, 4),
              ncol = 3, byrow = TRUE)

reclassified <- terra::classify(zion_elevation, rcl = rcl)
values(reclassified) <- as.factor(values(reclassified))
```

```{r}
# map by reclassification
tm_shape(reclassified) +
  tm_raster()
```

```{r} 
# local (map alegebra)
ndvi_fun <- function(nir, red) {
  (nir - red)/(nir + red)
}

ndvi_rast <- lapp(landsat[[c(4, 3)]], fun  = ndvi_fun)

tm_shape(ndvi_rast) +
  tm_raster()
```

```{r}
# focal (map alegebra)
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol = 9), fun = min)

tm_shape(elevation_focal) +
  tm_raster()
```

```{r}
# zonal (map alegebra)
terra::zonal(zion_elevation, reclassified, fun = mean)
```

```{r}
# global (map alegebra)
terra::global(zion_elevation, mean)
```

```{r}
# change extent
extend <- terra::extend(zion_elevation, c(1, 200))

extend2<- terra::extend(zion_elevation, extend)

extend + extend2
```

```{r}
# origin
origin(zion_elevation)
```

```{r}
# Changing resolution
zion_elevation_course <- terra::aggregate(zion_elevation,
                                          fact = 5,
                                          fun = mean)

zion_elevation_disagg <- terra::disagg(zion_elevation_course,
                                       fact = 5,
                                       method = "bilinear")

if(identical(zion_elevation, zion_elevation_disagg)) {
  print("match!")
} else{
  warning("don't match!")
}
```

```{r}
# resampling
target_rast <- rast(xmin = -113.2,
                    xmax = -112.9,
                    ymin = 37.4,
                    ymax = 37.5,
                    nrow = 450, ncol = 460,
                    crs = crs(zion_elevation))

elevation_resample <- terra::resample(zion_elevationm, y = target_rast, method = "bilinear")
```

